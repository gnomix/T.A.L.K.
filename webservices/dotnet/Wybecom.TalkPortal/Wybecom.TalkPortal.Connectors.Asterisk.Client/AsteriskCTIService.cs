//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :2.0.50727.3603
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Ce code source a été automatiquement généré par wsdl, Version=2.0.50727.42.
// 
namespace Wybecom.TalkPortal.Connectors.Asterisk.Client {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IAsteriskCTIService", Namespace="http://tempuri.org/")]
    public partial class AsteriskCTIService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CallOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnHookOperationCompleted;
        
        private System.Threading.SendOrPostCallback HangUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForwardOperationCompleted;
        
        private System.Threading.SendOrPostCallback HoldOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnHoldOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoNotDisturbOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback DivertOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgentLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgentLogoffOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateOperationCompleted;
        
        /// <remarks/>
        public AsteriskCTIService() {
            string urlSetting = System.Configuration.ConfigurationManager.AppSettings["AsteriskCTIService"];
            if ((urlSetting != null)) {
                this.Url = urlSetting;
            }
            else {
                this.Url = "http://localhost:8731/AsteriskCTIService/";
            }
        }
        
        /// <remarks/>
        public event CallCompletedEventHandler CallCompleted;
        
        /// <remarks/>
        public event UnHookCompletedEventHandler UnHookCompleted;
        
        /// <remarks/>
        public event HangUpCompletedEventHandler HangUpCompleted;
        
        /// <remarks/>
        public event ForwardCompletedEventHandler ForwardCompleted;
        
        /// <remarks/>
        public event HoldCompletedEventHandler HoldCompleted;
        
        /// <remarks/>
        public event UnHoldCompletedEventHandler UnHoldCompleted;
        
        /// <remarks/>
        public event DoNotDisturbCompletedEventHandler DoNotDisturbCompleted;
        
        /// <remarks/>
        public event TransferCompletedEventHandler TransferCompleted;
        
        /// <remarks/>
        public event DivertCompletedEventHandler DivertCompleted;
        
        /// <remarks/>
        public event AgentLoginCompletedEventHandler AgentLoginCompleted;
        
        /// <remarks/>
        public event AgentLogoffCompletedEventHandler AgentLogoffCompleted;
        
        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/Call", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Call([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string caller, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string callee) {
            object[] results = this.Invoke("Call", new object[] {
                        caller,
                        callee});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCall(string caller, string callee, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Call", new object[] {
                        caller,
                        callee}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCall(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CallAsync(string caller, string callee) {
            this.CallAsync(caller, callee, null);
        }
        
        /// <remarks/>
        public void CallAsync(string caller, string callee, object userState) {
            if ((this.CallOperationCompleted == null)) {
                this.CallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallOperationCompleted);
            }
            this.InvokeAsync("Call", new object[] {
                        caller,
                        callee}, this.CallOperationCompleted, userState);
        }
        
        private void OnCallOperationCompleted(object arg) {
            if ((this.CallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallCompleted(this, new CallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/UnHook", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnHook([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string callee, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string callid, out bool UnHookResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool UnHookResultSpecified) {
            object[] results = this.Invoke("UnHook", new object[] {
                        callee,
                        callid});
            UnHookResult = ((bool)(results[0]));
            UnHookResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnHook(string callee, string callid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnHook", new object[] {
                        callee,
                        callid}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUnHook(System.IAsyncResult asyncResult, out bool UnHookResult, out bool UnHookResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            UnHookResult = ((bool)(results[0]));
            UnHookResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void UnHookAsync(string callee, string callid) {
            this.UnHookAsync(callee, callid, null);
        }
        
        /// <remarks/>
        public void UnHookAsync(string callee, string callid, object userState) {
            if ((this.UnHookOperationCompleted == null)) {
                this.UnHookOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnHookOperationCompleted);
            }
            this.InvokeAsync("UnHook", new object[] {
                        callee,
                        callid}, this.UnHookOperationCompleted, userState);
        }
        
        private void OnUnHookOperationCompleted(object arg) {
            if ((this.UnHookCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnHookCompleted(this, new UnHookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/HangUp", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void HangUp([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string caller, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string callid, out bool HangUpResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool HangUpResultSpecified) {
            object[] results = this.Invoke("HangUp", new object[] {
                        caller,
                        callid});
            HangUpResult = ((bool)(results[0]));
            HangUpResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginHangUp(string caller, string callid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("HangUp", new object[] {
                        caller,
                        callid}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndHangUp(System.IAsyncResult asyncResult, out bool HangUpResult, out bool HangUpResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            HangUpResult = ((bool)(results[0]));
            HangUpResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void HangUpAsync(string caller, string callid) {
            this.HangUpAsync(caller, callid, null);
        }
        
        /// <remarks/>
        public void HangUpAsync(string caller, string callid, object userState) {
            if ((this.HangUpOperationCompleted == null)) {
                this.HangUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHangUpOperationCompleted);
            }
            this.InvokeAsync("HangUp", new object[] {
                        caller,
                        callid}, this.HangUpOperationCompleted, userState);
        }
        
        private void OnHangUpOperationCompleted(object arg) {
            if ((this.HangUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HangUpCompleted(this, new HangUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/Forward", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Forward([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string caller, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string destination, out bool ForwardResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ForwardResultSpecified) {
            object[] results = this.Invoke("Forward", new object[] {
                        caller,
                        destination});
            ForwardResult = ((bool)(results[0]));
            ForwardResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginForward(string caller, string destination, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Forward", new object[] {
                        caller,
                        destination}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndForward(System.IAsyncResult asyncResult, out bool ForwardResult, out bool ForwardResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            ForwardResult = ((bool)(results[0]));
            ForwardResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ForwardAsync(string caller, string destination) {
            this.ForwardAsync(caller, destination, null);
        }
        
        /// <remarks/>
        public void ForwardAsync(string caller, string destination, object userState) {
            if ((this.ForwardOperationCompleted == null)) {
                this.ForwardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForwardOperationCompleted);
            }
            this.InvokeAsync("Forward", new object[] {
                        caller,
                        destination}, this.ForwardOperationCompleted, userState);
        }
        
        private void OnForwardOperationCompleted(object arg) {
            if ((this.ForwardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForwardCompleted(this, new ForwardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/Hold", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Hold([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string callid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string caller, out bool HoldResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool HoldResultSpecified) {
            object[] results = this.Invoke("Hold", new object[] {
                        callid,
                        caller});
            HoldResult = ((bool)(results[0]));
            HoldResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginHold(string callid, string caller, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Hold", new object[] {
                        callid,
                        caller}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndHold(System.IAsyncResult asyncResult, out bool HoldResult, out bool HoldResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            HoldResult = ((bool)(results[0]));
            HoldResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void HoldAsync(string callid, string caller) {
            this.HoldAsync(callid, caller, null);
        }
        
        /// <remarks/>
        public void HoldAsync(string callid, string caller, object userState) {
            if ((this.HoldOperationCompleted == null)) {
                this.HoldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHoldOperationCompleted);
            }
            this.InvokeAsync("Hold", new object[] {
                        callid,
                        caller}, this.HoldOperationCompleted, userState);
        }
        
        private void OnHoldOperationCompleted(object arg) {
            if ((this.HoldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HoldCompleted(this, new HoldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/UnHold", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnHold([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string callid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string caller, out bool UnHoldResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool UnHoldResultSpecified) {
            object[] results = this.Invoke("UnHold", new object[] {
                        callid,
                        caller});
            UnHoldResult = ((bool)(results[0]));
            UnHoldResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnHold(string callid, string caller, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnHold", new object[] {
                        callid,
                        caller}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUnHold(System.IAsyncResult asyncResult, out bool UnHoldResult, out bool UnHoldResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            UnHoldResult = ((bool)(results[0]));
            UnHoldResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void UnHoldAsync(string callid, string caller) {
            this.UnHoldAsync(callid, caller, null);
        }
        
        /// <remarks/>
        public void UnHoldAsync(string callid, string caller, object userState) {
            if ((this.UnHoldOperationCompleted == null)) {
                this.UnHoldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnHoldOperationCompleted);
            }
            this.InvokeAsync("UnHold", new object[] {
                        callid,
                        caller}, this.UnHoldOperationCompleted, userState);
        }
        
        private void OnUnHoldOperationCompleted(object arg) {
            if ((this.UnHoldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnHoldCompleted(this, new UnHoldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/DoNotDis" +
            "turb", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DoNotDisturb([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string caller, out bool DoNotDisturbResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DoNotDisturbResultSpecified) {
            object[] results = this.Invoke("DoNotDisturb", new object[] {
                        caller});
            DoNotDisturbResult = ((bool)(results[0]));
            DoNotDisturbResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoNotDisturb(string caller, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoNotDisturb", new object[] {
                        caller}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDoNotDisturb(System.IAsyncResult asyncResult, out bool DoNotDisturbResult, out bool DoNotDisturbResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            DoNotDisturbResult = ((bool)(results[0]));
            DoNotDisturbResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DoNotDisturbAsync(string caller) {
            this.DoNotDisturbAsync(caller, null);
        }
        
        /// <remarks/>
        public void DoNotDisturbAsync(string caller, object userState) {
            if ((this.DoNotDisturbOperationCompleted == null)) {
                this.DoNotDisturbOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoNotDisturbOperationCompleted);
            }
            this.InvokeAsync("DoNotDisturb", new object[] {
                        caller}, this.DoNotDisturbOperationCompleted, userState);
        }
        
        private void OnDoNotDisturbOperationCompleted(object arg) {
            if ((this.DoNotDisturbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoNotDisturbCompleted(this, new DoNotDisturbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/Transfer" +
            "", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Transfer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string callid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string caller, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string destination, out bool TransferResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool TransferResultSpecified) {
            object[] results = this.Invoke("Transfer", new object[] {
                        callid,
                        caller,
                        destination});
            TransferResult = ((bool)(results[0]));
            TransferResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTransfer(string callid, string caller, string destination, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Transfer", new object[] {
                        callid,
                        caller,
                        destination}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTransfer(System.IAsyncResult asyncResult, out bool TransferResult, out bool TransferResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            TransferResult = ((bool)(results[0]));
            TransferResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void TransferAsync(string callid, string caller, string destination) {
            this.TransferAsync(callid, caller, destination, null);
        }
        
        /// <remarks/>
        public void TransferAsync(string callid, string caller, string destination, object userState) {
            if ((this.TransferOperationCompleted == null)) {
                this.TransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferOperationCompleted);
            }
            this.InvokeAsync("Transfer", new object[] {
                        callid,
                        caller,
                        destination}, this.TransferOperationCompleted, userState);
        }
        
        private void OnTransferOperationCompleted(object arg) {
            if ((this.TransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferCompleted(this, new TransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/Divert", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Divert([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string callid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string caller, out bool DivertResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DivertResultSpecified) {
            object[] results = this.Invoke("Divert", new object[] {
                        callid,
                        caller});
            DivertResult = ((bool)(results[0]));
            DivertResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDivert(string callid, string caller, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Divert", new object[] {
                        callid,
                        caller}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDivert(System.IAsyncResult asyncResult, out bool DivertResult, out bool DivertResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            DivertResult = ((bool)(results[0]));
            DivertResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DivertAsync(string callid, string caller) {
            this.DivertAsync(callid, caller, null);
        }
        
        /// <remarks/>
        public void DivertAsync(string callid, string caller, object userState) {
            if ((this.DivertOperationCompleted == null)) {
                this.DivertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDivertOperationCompleted);
            }
            this.InvokeAsync("Divert", new object[] {
                        callid,
                        caller}, this.DivertOperationCompleted, userState);
        }
        
        private void OnDivertOperationCompleted(object arg) {
            if ((this.DivertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DivertCompleted(this, new DivertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/AgentLog" +
            "in", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AgentLogin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string agent, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dn, out bool AgentLoginResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AgentLoginResultSpecified) {
            object[] results = this.Invoke("AgentLogin", new object[] {
                        agent,
                        dn});
            AgentLoginResult = ((bool)(results[0]));
            AgentLoginResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAgentLogin(string agent, string dn, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AgentLogin", new object[] {
                        agent,
                        dn}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAgentLogin(System.IAsyncResult asyncResult, out bool AgentLoginResult, out bool AgentLoginResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            AgentLoginResult = ((bool)(results[0]));
            AgentLoginResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void AgentLoginAsync(string agent, string dn) {
            this.AgentLoginAsync(agent, dn, null);
        }
        
        /// <remarks/>
        public void AgentLoginAsync(string agent, string dn, object userState) {
            if ((this.AgentLoginOperationCompleted == null)) {
                this.AgentLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgentLoginOperationCompleted);
            }
            this.InvokeAsync("AgentLogin", new object[] {
                        agent,
                        dn}, this.AgentLoginOperationCompleted, userState);
        }
        
        private void OnAgentLoginOperationCompleted(object arg) {
            if ((this.AgentLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgentLoginCompleted(this, new AgentLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/AgentLog" +
            "off", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AgentLogoff([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string agent, out bool AgentLogoffResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AgentLogoffResultSpecified) {
            object[] results = this.Invoke("AgentLogoff", new object[] {
                        agent});
            AgentLogoffResult = ((bool)(results[0]));
            AgentLogoffResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAgentLogoff(string agent, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AgentLogoff", new object[] {
                        agent}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAgentLogoff(System.IAsyncResult asyncResult, out bool AgentLogoffResult, out bool AgentLogoffResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            AgentLogoffResult = ((bool)(results[0]));
            AgentLogoffResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void AgentLogoffAsync(string agent) {
            this.AgentLogoffAsync(agent, null);
        }
        
        /// <remarks/>
        public void AgentLogoffAsync(string agent, object userState) {
            if ((this.AgentLogoffOperationCompleted == null)) {
                this.AgentLogoffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgentLogoffOperationCompleted);
            }
            this.InvokeAsync("AgentLogoff", new object[] {
                        agent}, this.AgentLogoffOperationCompleted, userState);
        }
        
        private void OnAgentLogoffOperationCompleted(object arg) {
            if ((this.AgentLogoffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgentLogoffCompleted(this, new AgentLogoffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wybecom.org/talkportal/cti/asteriskctiservice/IAsteriskCTIService/Authenti" +
            "cate", RequestNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", ResponseNamespace="http://wybecom.org/talkportal/cti/asteriskctiservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Authenticate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string user, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool AuthenticateResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AuthenticateResultSpecified) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        user,
                        password});
            AuthenticateResult = ((bool)(results[0]));
            AuthenticateResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthenticate(string user, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Authenticate", new object[] {
                        user,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAuthenticate(System.IAsyncResult asyncResult, out bool AuthenticateResult, out bool AuthenticateResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            AuthenticateResult = ((bool)(results[0]));
            AuthenticateResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string user, string password) {
            this.AuthenticateAsync(user, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string user, string password, object userState) {
            if ((this.AuthenticateOperationCompleted == null)) {
                this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
            }
            this.InvokeAsync("Authenticate", new object[] {
                        user,
                        password}, this.AuthenticateOperationCompleted, userState);
        }
        
        private void OnAuthenticateOperationCompleted(object arg) {
            if ((this.AuthenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CallCompletedEventHandler(object sender, CallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UnHookCompletedEventHandler(object sender, UnHookCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnHookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnHookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool UnHookResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool UnHookResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void HangUpCompletedEventHandler(object sender, HangUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HangUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HangUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool HangUpResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool HangUpResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ForwardCompletedEventHandler(object sender, ForwardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForwardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForwardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ForwardResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ForwardResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void HoldCompletedEventHandler(object sender, HoldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HoldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HoldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool HoldResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool HoldResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UnHoldCompletedEventHandler(object sender, UnHoldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnHoldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnHoldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool UnHoldResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool UnHoldResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DoNotDisturbCompletedEventHandler(object sender, DoNotDisturbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoNotDisturbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoNotDisturbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool DoNotDisturbResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DoNotDisturbResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TransferCompletedEventHandler(object sender, TransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool TransferResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool TransferResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DivertCompletedEventHandler(object sender, DivertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DivertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DivertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool DivertResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DivertResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AgentLoginCompletedEventHandler(object sender, AgentLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgentLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgentLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool AgentLoginResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AgentLoginResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AgentLogoffCompletedEventHandler(object sender, AgentLogoffCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgentLogoffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgentLogoffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool AgentLogoffResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AgentLogoffResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool AuthenticateResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AuthenticateResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
}
